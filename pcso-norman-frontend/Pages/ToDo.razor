@page "/todo"
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Headers;


@*<h1>Welcome ToDo Page - here we will consume the new API</h1>*@

@*<h3>@jasonData</h3>*@

@*<p role="status">Current count: @count</p>*@

@*@if (toDoItems != null)
{
    @foreach (var todo in toDoItems)
    {
        <MudCard>
            <!--MudCardMedia Image="images/satya.jfif" Height="50" /-->
            <MudCardContent>
                <MudText Typo="Typo.h5" Color="Color.Primary">@todo.name</MudText>
                <MudText Typo="Typo.body1">@todo.message</MudText>
                <MudText Typo="Typo.body2">@todo.created</MudText>  
            </MudCardContent>
        </MudCard>
        <br />
    }
}*@

@*@if (toDoItems == null)
{
    <p><em>Loading... version 1.0</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Message</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todoitem in toDoItems)
            {
                <tr>
                    <td>@todoitem.name</td>
                    <td>@todoitem.message</td>
                    <td>@todoitem.created</td>
                </tr>
            }
        </tbody>
    </table>
}*@


@*  <input @bind="name" placeholder="type name"/>
  <input @bind="message" placeholder="type message" />*@

@if (toDoItems != null)
{
    @foreach (var todo in toDoItems)
    {
        <MudCard>
            <!--MudCardMedia Image="images/satya.jfif" Height="50" /-->
            <MudCardContent>
                <MudText Typo="Typo.h5" Color="Color.Primary">@todo.name</MudText>
                <MudText Typo="Typo.body1">@todo.message</MudText>
                <MudText Typo="Typo.body2">@todo.created</MudText>  
            </MudCardContent>
        </MudCard>
        <br />
    }
}


<MudTextField @bind-Value="name" Label="Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="message" Label="Message" Variant="Variant.Outlined"></MudTextField>


  <br><br>

   <MudButton Variant="Variant.Filled" 
            EndIcon="@Icons.Material.Filled.Send" 
            OnClick="AddToDo"
            Color="Color.Primary">Add</MudButton>

 <MudButton Variant="Variant.Filled" 
            EndIcon="@Icons.Material.Filled.Send" 
            OnClick="InvokeJavaScript"
            Color="Color.Primary">Update App</MudButton>

<MudButton Variant="Variant.Filled" 
            EndIcon="@Icons.Material.Filled.Send"
            OnClick="DeleteAll"
            Color="Color.Primary">Delete List</MudButton>


@*  <button class="btn btn-primary" @onclick="AddToDo">Add To Do</button>
  <button class="btn btn-primary" @onclick="InvokeJavaScript">Invoke Java Script</button>
  <button class="btn btn-primary" @onclick="DeleteAll">Delete All</button>

  <MudButton Variant="Variant.Filled" Color="Color.Primary">Primary</MudButton>*@

@code {
    private int count = 0;
    private string jasonData = string.Empty;
    private List<ToDoItem> toDoItems = null;

    private string name;
    private string message;
    private bool isComplete;

    HttpClient hc = null;

    protected async override Task OnInitializedAsync()
    {
        await GetListAsync();
        base.OnInitializedAsync();
    }


    private async void DeleteAll()
    {
        HttpClient httpClient = new HttpClient();
        await httpClient.DeleteAsync("https://pcso-norman-api.azurewebsites.net/todoitems");
        await GetListAsync();
        StateHasChanged();
    }

    private async void AddToDo()
    {
        //count++;

        hc = new HttpClient();

        ToDoItem todoItemPost = new ToDoItem
            {
                message = message,
                name = name
            };

        string myContent = JsonSerializer.Serialize(todoItemPost);
        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        ByteArrayContent byteContent = new ByteArrayContent(buffer);

        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        await hc.PostAsync("https://pcso-norman-api.azurewebsites.net/todoitems", byteContent);

       
          await GetListAsync();
        StateHasChanged();
                        
    }

    private async Task GetListAsync()
    {
        hc = new HttpClient();


        // get all the records
        jasonData = await hc.GetStringAsync("https://pcso-norman-api.azurewebsites.net/todoitems");

        toDoItems = JsonSerializer.Deserialize<List<ToDoItem>>(jasonData);

        name = null;
        message = null;

    }

    private void InvokeJavaScript()
    {
        JS.InvokeVoidAsync("DeleteCache");
        JS.InvokeVoidAsync("HelloAlert");

    }

    public class ToDoItem
    {
        public int id { get; set; }
        public string  name { get; set; }
        public bool isComplete { get; set; }
        public string message { get; set; }
        public DateTime created { get; set; } = DateTime.Now;
    }


                }
