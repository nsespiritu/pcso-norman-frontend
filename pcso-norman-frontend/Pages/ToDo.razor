@page "/todo"
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Headers;


<h1>Welcome ToDo Page - here we will consume the new API</h1>

@*<h3>@jasonData</h3>*@

@*<p role="status">Current count: @count</p>*@



@if (toDoItems == null)
{
    <p><em>Loading... version 1.0</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Message</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todoitem in toDoItems)
            {
                <tr>
                    <td>@todoitem.name</td>
                    <td>@todoitem.message</td>
                    <td>@todoitem.created.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}


  <input @bind="name" placeholder="type name"/>
  <input @bind="message" placeholder="type message" />
  <br><br>

  <button class="btn btn-primary" @onclick="AddToDo">Add To Do</button>
  <button class="btn btn-primary" @onclick="InvokeJavaScript">Invoke Java Script</button>
  <button class="btn btn-primary" @onclick="DeleteAll">Delete All</button>

  <MudButton Variant="Variant.Filled" Color="Color.Primary">Primary</MudButton>

@code {
    private int count = 0;
    private string jasonData = string.Empty;
    private List<ToDoItem> toDoItems = null;

    private string name;
    private string message;
    HttpClient hc = null;

     private async void DeleteAll()
    {
        HttpClient httpClient = new HttpClient();
        await httpClient.DeleteAsync("https://pcso-norman-api.azurewebsites.net/todoitems");
        await GetListAsync();
        StateHasChanged();
    }


    private async void AddToDo()
    {
        //count++;

        hc = new HttpClient();

        ToDoItem todoItemPost = new ToDoItem
            {
                message = message,
                name = name
            };

        string myContent = JsonSerializer.Serialize(todoItemPost);
        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        ByteArrayContent byteContent = new ByteArrayContent(buffer);

        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        await hc.PostAsync("https://pcso-norman-api.azurewebsites.net/todoitems", byteContent);

       
          await GetListAsync();
        StateHasChanged();
                        
    }

      private async Task GetListAsync()
    {
        hc = new HttpClient();


        // get all the records
        jasonData = await hc.GetStringAsync("https://pcso-norman-api.azurewebsites.net/todoitems");

        toDoItems = JsonSerializer.Deserialize<List<ToDoItem>>(jasonData);

                        name = null;
                        message = null;

    }


                    private void InvokeJavaScript()
                    {
                        JS.InvokeVoidAsync("DeleteCache");
                        JS.InvokeVoidAsync("HelloAlert");

                    }

                    public class ToDoItem
                    {
                        public int id { get; set; }
                        public string  name { get; set; }
                        public bool isComplete { get; set; }
                        public string message { get; set; }
                        public DateTime created { get; set; } = DateTime.Now;
                    }


                }
